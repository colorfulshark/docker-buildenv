#! /usr/bin/env bash

#set -x

config_path='/etc/docker-buildenv'

# $1: config file name
function get_project_config() {
	local project=$1
	local project_config="$config_path/$project"
	if [ ! -f "$project_config" ]; then
		echo ''
	else
		echo $project_config
	fi
}

function get_username() {
	echo $(id -nu)
}

function get_uid() {
	echo $(id -u)
}

# $1: project config path
function load_project_env() {
	local project_config=$1
	if [ "x$project_config" != "x" ]; then
		source $project_config
	fi
}

function init_project_env() {
	if [ "x$(type -t init_project)" == "xfunction" ]; then
		init_project
	fi
}

# $1: container id
# $2: username
# $3: command
function container_cmd() {
	local container_id=$1
	local username=$2
	local cmd=$3
	docker exec -i -u $username $container_id bash -c "$cmd &> /dev/null"
}

# $1: container id
function create_user() {
	local container_id=$1
	local uid=$(get_uid)
	local username=$(get_username)
	local tmpuser='tmpuser'
	container_cmd $container_id root "useradd -m -s /bin/bash -u $uid $username"
	container_cmd $container_id root "chown $username /home/$username"
	container_cmd $container_id root "useradd -m -s /bin/bash $tmpuser"
	container_cmd $container_id $username "cp -rT /home/$tmpuser /home/$username"
	container_cmd $container_id root "userdel -fr $tmpuser"
}

# $1: container id
function set_git_env() {
	local container_id=$1
	local username=$(get_username)
	local git_name=$(git config user.name)
	local git_email=$(git config user.email)
	container_cmd $container_id $username "git config --global user.name '$git_name'"
	container_cmd $container_id $username "git config --global user.email '$git_email'"
}

# $1: container id
exec_extra_cmd() {
	local container_id=$1
	if [ -z "$extra_cmd" ]; then
		return
	fi
	container_cmd $container_id root "$extra_cmd"
}

# get container name based on project name
# $1: project name
function get_container_name() {
	local project_name=$1
	local username=$(get_username)
	if [ "x$project_name" == "x" ]; then
		echo ''
	else
		echo "${username}_${project_name}"
	fi
}

# find container id based on it's name
# $1: container name
# return: container id or empty string
function find_container_id() {
	local container_name=$1
	local container_id=$(docker ps -a -q -f "name=^$container_name$")
	echo $container_id
}

# start the container for project
# $1: docker image id or name
# $2: project name
# $3: mount volumes
# $4: extra docker run options
function start_container() {
	echo 'start container'
	local docker_image=$1
	local project_name=$2
	local mount_volumes=$3
	local extra_options=$4
	local username=$(get_username)
	local container_name=$(get_container_name $project_name)
	run_cmd="docker run
			-dt
			$mount_volumes
			--name $container_name
			$extra_options
			$docker_image
			/bin/bash"
	local container_id=$(find_container_id $container_name)
	if [ "x$container_id" == "x" ]; then
		echo "create container $container_name now"
		container_id=$($run_cmd)
		if [ "x$?" != "x0" ]; then
			echo "failed to create container $container_name"
			exit
		fi
		container_id=$(find_container_id $container_name)
		echo "container $container_name:$container_id is created"
		create_user $container_id
		set_git_env $container_id
		exec_extra_cmd $container_id
	else
		echo "container $container_name:$container_id exists, just start it"
		docker start $container_id > /dev/null
	fi
	docker exec -it -u $username $container_id /bin/bash
}

# $1: project name
function stop_container() {
	echo 'stop container'
	local project_name=$1
	local container_name=$(get_container_name $project_name)
	local container_id=$(find_container_id $container_name)
	if [ "x$container_id" == "x" ]; then
		echo "container $container_name does not exist, exit"
		return -1
	fi
	echo "stop and remove container $container_name:$container_id"
	docker stop $container_id > /dev/null
	docker rm $container_id > /dev/null
}

function list_container() {
	docker ps -a -f "name=^${username}"
}

function show_help() {
	echo 'Usage: cs [OPTIONS]'
	echo ''
	echo 'A script used to start a container with custom configuration'
	echo ''
	echo 'Options:'
	echo '-r	start a container, this is the default option,'
	echo '	you need to specify docker image and container name'
	echo '-s	stop a container, you need to specify container name'
	echo '-h	show this help message'
	echo '-n	specify container name'
	echo '-i	specify docker image'
	echo '-v	specify mount volumn'
}

function show_all_projects() {
	ls $config_path
}

function err_cmd() {
	echo 'command error'
	show_help
}

# $1: project config file name
# $2: command
function start_process() {
	local project=$1
	local cmd=$2
	local project_config=$(get_project_config $project)
	if [ "x$project_config" == "x" ]; then
		echo 'please specify a valid project'
		show_all_projects
		exit -1
	fi
	# source project config env
	load_project_env $project_config
	case $cmd in
		'')
		init_project_env
		start_container $image $name "$volume" "$extra_option"
		;;
		'stop')
		stop_container $name
		;;
		*)
		err_cmd
		;;
	esac
}

start_process $*
