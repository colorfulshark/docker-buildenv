#! /usr/bin/env bash

#set -x

config_path="/etc/buildenv/projects"
template_path="/etc/buildenv/templates"

rootfs_blacklist='.buildenv dev proc run sys'
tmp_dir='/tmp/buildenv'
bootstrap_image='buildenv_bootstrap'
base_image='buildenv_base'

# find container id based on it's name
# $1: container name
# return: container id or empty string
function find_container_id() {
	local container_name=$1
	local container_id=$(docker ps -a -q -f "name=^$container_name$")
	echo $container_id
}

# start the container for project
# $1: docker image id or name
# $2: project name
# $3: mount volumes
# $4: extra docker run options
function start_container() {
	echo 'start container'
	local docker_image=$1
	local project_name=$2
	local mount_volumes=$3
	local extra_options=$4
	local username=$(id -nu)
	local container_name="${username}_${project_name}"
	run_cmd="docker run
			-dt
			--privileged
			--hostname $project_name
			$mount_volumes
			--name $container_name
			$extra_options
			$docker_image
			$DISTRO_INIT"
	local container_id=$(find_container_id $container_name)
	if [ "x$container_id" == "x" ]; then
		echo "create container $container_name now"
		container_id=$($run_cmd)
		if [ "x$?" != "x0" ]; then
			echo "failed to create container $container_name"
			exit -1
		fi
		container_id=$(find_container_id $container_name)
		echo "container $container_name:$container_id is created"
	else
		echo "container $container_name:$container_id exists, just start it"
		docker start $container_id > /dev/null
	fi
	docker exec -it $container_id bash
}

# stop the container
# $1: project name
function stop_container() {
	echo 'stop container'
	local project_name=$1
	local username=$(id -nu)
	local container_name="${username}_${project_name}"
	local container_id=$(find_container_id $container_name)
	if [ "x$container_id" == "x" ]; then
		echo "container $container_name does not exist, exit"
		return -1
	fi
	echo "stop and remove container $container_name:$container_id"
	docker stop $container_id > /dev/null
	docker rm $container_id > /dev/null
}

function list_container() {
	local data="Project:Distro:Version:ContainerID:Status\n"
	while read -r name id status
	do
		project_name=${name#"$(id -nu)_"}
		load_project_metadata $project_name
		data="$data$project_name:$DISTRO_NAME:$DISTRO_VERSION:$id:$status\n"
	done <<< $(docker ps -a -f "name=^${username}" --format "{{.Names}}\t{{.ID}}\t{{.Status}}")
	printf "$data" | column -t -s:
}

function show_help() {
	echo 'A script used to start a container with custom configuration'
	echo ''
	echo 'Usage: buildenv COMMAND PROJECT'
	echo ''
	echo 'Commands:'
	echo 'start:     start the container of this project'
	echo 'stop:      stop the container of this project'
	echo 'help:      show this help message'
	echo 'clean:     clean all files related to this project'
	echo 'init:      create system files for this project'
	echo 'status:    show status of all projects'
	echo 'template:  show all templates'
	echo 'list       list all projects'
}

function show_all_projects() {
	local data="Project:Distro:Version:Rootfs\n"
	for p in $(ls $config_path)
	do
		load_project_metadata $p
		data="$data$p:$DISTRO_NAME:$DISTRO_VERSION:$rootfs_dir\n"
	done
	printf "$data" | column -t -s:
}

# $1: project name
function load_project_metadata() {
	local project_name=$1
	# try to load project metadata
	local project_config="$config_path/$project_name"
	if [ "x$project_name" == "x" ]; then
		echo 'please specify a valid project'
		show_all_projects
		exit -1
	fi
	source $project_config
	# check if template exists
	if [ -z "$template" ]; then
		echo "please specify a template in project $project_name"
		exit -1
	elif [ ! -e "$template_path/$template" ]; then
		echo "template $template does not exist!"
		exit -1
	fi
	# load template metadata
	source $template_path/$template
}

# $1: project name
function start_project() {
	local project_name=$1
	# check if base image is ready
	create_base_image
	# load project metadata
	load_project_metadata $project_name
	# check if rootfs exists
	if [ ! -d "$rootfs_dir" ]; then
		echo "rootfs directory does not exist!"
		exit -1
	fi
	# check if rootfs is complete
	if [ ! -f "$rootfs_dir/.buildenv" ]; then
		echo "rootfs is not complete, please init it first!"
		exit -1
	fi
	# generate rootfs mount option
	for f in $(ls $rootfs_dir)
	do
		# this dirs will not be mount into container
		if [[ "$rootfs_blacklist" == *"$f"* ]]; then
			continue
		fi
		volume="-v $rootfs_dir/$f:/$f $volume"
	done

	# start container
	start_container "$base_image" "$name" "$volume" "$extra_option"
}

function stop_project() {
	local project_name=$1
	# stop container
	if [ "x$project_name" == "x" ]; then
		echo 'please specify a valid project'
		show_all_projects
		exit -1
	fi
	stop_container $project_name
}

function get_arch() {
	local arch=$(uname -m)
	if [ "$arch" == 'aarch64' ]; then
		CPU_ARCH='arm64'
	elif [ "$arch" == "x86_64" ]; then
		CPU_ARCH='amd64'
	fi
}

# $1: distro name
# $2: distro version
function download_image() {
	local distro_name=$1
	local distro_version=$2
	# get cpu arch of current machine
	get_arch
	# download index-system
	local index_link=$server/meta/1.0/index-system
	echo "download system index information from $index_link"
	wget --show-progress --no-check-certificate -q -O $tmp_dir/index-system $index_link
	if [ $? -ne 0 ]; then
		echo 'download failed, please check you internet connection!'
		rm -rf $tmp_dir
		exit -1
	fi
	# download rootfs tarball and extract it
	while IFS=';' read -r name version arch platform date path
	do
		if [ "$name" == "$distro_name" ] &&
			[ "$version" == "$distro_version" ] &&
			[ "$arch" == "$CPU_ARCH" ] &&
			[ "$platform" == "default" ]; then
			local rootfs_link="$server""$path""rootfs.tar.xz"
			break
		fi
	done < $tmp_dir/index-system
	echo "download rootfs tarball from $rootfs_link"
	wget --show-progress --no-check-certificate -q -O $tmp_dir/rootfs.tar.xz $rootfs_link
	if [ $? -ne 0 ]; then
		echo 'download failed, please check you internet connection!'
		rm -rf $tmp_dir
		exit -1
	fi
	xz -d $tmp_dir/rootfs.tar.xz
}

# we need a bootstrap image as the base for other environments
function bootstrap() {
	# check if bootstrap image is ready
	docker image inspect $bootstrap_image &> /dev/null
	if [ $? -eq 0 ]; then
		echo 'buildenv bootstrap image is ready'
		return
	fi
	# init buildenv bootstrap image
	echo 'buildenv bootstrap image is not exist, create it'
	rm -rf $tmp_dir/*
	download_image 'debian' 'bullseye'
	docker import $tmp_dir/rootfs.tar $bootstrap_image
	rm -rf $tmp_dir/*
}

function create_base_image() {
	# check if base image exists
	docker image inspect $base_image &> /dev/null
	if [ $? -eq 0 ]; then
		echo 'buildenv base image is ready'
		return
	fi
	# init buildenv bootstrap image
	echo 'buildenv base image is not exist, create it'
	docker import - $base_image < /dev/null
}

# $1: project name
function init_project() {
	local project_name=$1
	local server='https://images.linuxcontainers.org'
	rm -rf $tmp_dir &> /dev/null
	mkdir $tmp_dir
	# check if bootstrap is ready
	bootstrap
	# load project metadata
	load_project_metadata $project_name
	# check if rootfs dir exists and empty
	if [ ! -d "$rootfs_dir" ]; then
		echo "rootfs directory '$rootfs_dir' does not exist!"
		rm -rf $tmp_dir
		exit -1
	elif [ ! -z "$(ls -A $rootfs_dir)" ]; then
		echo "rootfs directory '$rootfs_dir' is not empty!"
		rm -rf $tmp_dir
		exit -1
	fi
	download_image $DISTRO_NAME $DISTRO_CODE
	# extract rootfs to rootfs directory, we use privileged
	# container to escalate to root permission
	echo "extracting rootfs to $rootfs_dir"
	local tmp_vol="-v $tmp_dir:/mnt/tmp -v $rootfs_dir:/mnt/rootfs"
	# 1. extract rootfs with root permission
	local cmd1='tar -xf /mnt/tmp/rootfs.tar -C /mnt/rootfs'
	# 2. let docker populate the dns server
	local cmd2='rm /mnt/rootfs/etc/resolv.conf'
	# 2. mark roofs as ready
	local cmd3='touch /mnt/rootfs/.buildenv'
	# 3. TODO gen post_init script
	local cmds="$cmd1;$cmd2;$cmd3"
	docker run --rm $tmp_vol buildenv_bootstrap bash -c "$cmds"
	if [ $? -ne 0 ]; then
		echo 'extract failed!'
		rm -rf $tmp_dir
		exit -1
	fi
	rm -rf $tmp_dir
	echo "init project $project_name success!"
}

# $1: project name
function clean_project() {
	local project_name=$1
	# check if bootstrap is ready
	bootstrap
	# load project metadata
	load_project_metadata $project_name
	read -p "will delete all files in $rootfs_dir! [Y/N]" ans
	if [ "$ans" == 'Y' ] || [ "$ans" == 'y' ]; then
		local tmp_vol="-v $rootfs_dir:/mnt/rootfs"
		local cmds='ls -A /mnt/rootfs | xargs -I {} rm -rf /mnt/rootfs/{}'
		docker run --rm $tmp_vol buildenv_bootstrap bash -c "$cmds"
		echo "finish cleanup project $project_name"
	else
		echo 'canceled cleaning process'
	fi
}

function show_templates() {
	local data="Template:Distro:Version:Code\n"
	for t in $(ls $template_path)
	do
		source $template_path/$t
		data="$data$t:$DISTRO_NAME:$DISTRO_VERSION:$DISTRO_CODE\n"
	done
	printf $data | column -t -s:
}

# $1: project config file name
# $2: command
function main() {
	local cmd=$1
	local project=$2

	# load project information if available
	case $cmd in
		'')
		show_help
		;;
		'start')
		start_project $project
		;;
		'stop')
		stop_project $project
		;;
		'restart')
		stop_project $project
		start_project $project
		;;
		'clean')
		stop_project $project
		clean_project $project
		;;
		'init')
		init_project $project
		;;
		'status')
		list_container
		;;
		'template')
		show_templates
		;;
		'list')
		show_all_projects
		;;
		*)
		show_help
		;;
	esac
}

main $*
